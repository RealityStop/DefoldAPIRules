{
  "namespace": "sound",
  "Overrides": {
    "Methods": {
      "play": [
        {
          "TargetParameterCount": 3,
          "TargetReturnValueCount": 1,
          "returnvalues": [
            {
              "name": "id",
              "doc": "The identifier for the sound voice",
              "types": [
                "number"
              ]
            }
          ],
          "parameters": [
            {
              "name": "url",
              "doc": "the sound that should play",
              "types": [
                "string",
                "hash",
                "url"
              ]
            },
            {
              "name": "[play_properties]",
              "doc": "<dl>\n<dt>optional table with properties:</dt>\n<dt><code>delay</code></dt>\n<dd><span class=\"type\">number</span> delay in seconds before the sound starts playing, default is 0.</dd>\n<dt><code>gain</code></dt>\n<dd><span class=\"type\">number</span> sound gain between 0 and 1, default is 1. The final gain of the sound will be a combination of this gain, the group gain and the master gain.</dd>\n<dt><code>pan</code></dt>\n<dd><span class=\"type\">number</span> sound pan between -1 and 1, default is 0. The final pan of the sound will be an addition of this pan and the sound pan.</dd>\n<dt><code>speed</code></dt>\n<dd><span class=\"type\">number</span> sound speed where 1.0 is normal speed, 0.5 is half speed and 2.0 is double speed. The final speed of the sound will be a multiplication of this speed and the sound speed.</dd>\n</dl>",
              "types": [
                "table"
              ]
            },
            {
              "name": "[complete_function]",
              "doc": "function to call when the sound has finished playing.\n<dl>\n<dt><code>self</code></dt>\n<dd><span class=\"type\">object</span> The current object.</dd>\n<dt><code>message_id</code></dt>\n<dd><span class=\"type\">hash</span> The name of the completion message, <code>\"sound_done\"</code>.</dd>\n<dt><code>message</code></dt>\n<dd><span class=\"type\">table</span> Information about the completion:</dd>\n</dl>\n<ul>\n<li><span class=\"type\">number</span> <code>play_id</code> - the sequential play identifier that was given by the sound.play function.</li>\n</ul>\n<dl>\n<dt><code>sender</code></dt>\n<dd><span class=\"type\">url</span> The invoker of the callback: the sound component.</dd>\n</dl>",
              "types": [
                "function(object self, hash message_id, ILuaTable message, url sender))"
              ]
            }
          ]
        }
      ]
    }
  },
  "CustomContent": "\n\n\npublic int Play(string sound)\n{\n   return (int)play(sound);\n}\n\n\npublic int Play(Hash sound)\n{\n   return (int)play(sound);\n}\n\n\npublic int Play(Url sound)\n{\n   return (int)play(sound);\n}\n\n\npublic int Play(string sound,\n   double delay = 0,\n   double gain = 1,\n   double pan = 0,\n   double speed = 1,\n   Action<Sound, Hash, int, Url> onCompleteCallback = null)\n{\n   LuaTable table = new LuaTable();\n   table.Add(\"delay\", delay);\n   table.Add(\"gain\", gain);\n   table.Add(\"pan\", pan);\n   table.Add(\"speed\", speed);\n\n   if (onCompleteCallback != null)\n   {\n      void callback(object o, Hash hash, dynamic arg3, Url arg4)\n      {\n         onCompleteCallback(this, hash, arg3[\"play_id\"], arg4);\n      }\n\n      return (int)play(sound, table, callback);\n   }\n   else\n      return (int)play(sound, table);\n}\n\npublic int Play(Hash sound,\n   double delay = 0,\n   double gain = 1,\n   double pan = 0,\n   double speed = 1,\n   Action<Sound, Hash, int, Url> onCompleteCallback = null)\n{\n   LuaTable table = new LuaTable();\n   table.Add(\"delay\", delay);\n   table.Add(\"gain\", gain);\n   table.Add(\"pan\", pan);\n   table.Add(\"speed\", speed);\n\n   if (onCompleteCallback != null)\n   {\n      void callback(object o, Hash hash, dynamic arg3, Url arg4)\n      {\n         onCompleteCallback(this, hash, arg3[\"play_id\"], arg4);\n      }\n\n      return (int)play(sound, table, callback);\n   }\n   else\n      return (int)play(sound, table);\n}\n\npublic int Play(Url sound,\n   double delay = 0,\n   double gain = 1,\n   double pan = 0,\n   double speed = 1,\n   Action<Sound, Hash, int, Url> onCompleteCallback = null)\n{\n   LuaTable table = new LuaTable();\n   table.Add(\"delay\", delay);\n   table.Add(\"gain\", gain);\n   table.Add(\"pan\", pan);\n   table.Add(\"speed\", speed);\n\n   if (onCompleteCallback != null)\n   {\n      void callback(object o, Hash hash, dynamic arg3, Url arg4)\n      {\n         onCompleteCallback(this, hash, arg3[\"play_id\"], arg4);\n      }\n\n      return (int)play(sound, table, callback);\n   }\n   else\n      return (int)play(sound, table);\n}\n\n\npublic void Stop()\n{\n   stop(this);\n}\n\n\npublic void Pause(bool shouldPause = true)\n{\n   pause(this, shouldPause);\n}\n\n\npublic void Unpause()\n{\n   pause(this, false);\n}\n\n\npublic void SetGain(double gain)\n{\n   set_gain(this, gain);\n}\n\n\npublic void SetPan(double pan)\n{\n   set_pan(this, pan);\n}"
}